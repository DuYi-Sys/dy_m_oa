<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>
<TITLE>parse 方法</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css">
<META NAME="MS-HKWD" CONTENT="parse 方法">
<META NAME="MS-HKWD" CONTENT="parse">
<META NAME="MS-HKWD" CONTENT="static 方法">
<META NAME="MS-HKWD" CONTENT="数据对象">
<META NAME="MS-HKWD" CONTENT="毫秒">
<META NAME="MS-HKWD" CONTENT="字符串解析">
<META NAME="MS-HKWD" CONTENT="日期">
<META NAME="MS-HKWD" CONTENT="VT_DATE">
<META NAME="MS-HKWD" CONTENT="ActiveX 对象">                      

<META NAME=MS-HAID CONTENT="jsdateparse">
<META NAME="MS.LOCALE" CONTENT="ZH-CN">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=gb2312">
<META NAME="PRODUCT" CONTENT="JScript">
<META NAME="TECHNOLOGY" CONTENT="SCRIPTING">
<META NAME="CATEGORY" CONTENT="Language Reference">
<META NAME="Description" CONTENT="parse Method">
<META NAME="Keywords" CONTENT="parse method; parse; static method; Date object; milliseconds; parsing strings; dates; VT_DATE; ActiveX object">

</HEAD>



<BODY BGCOLOR="#FFFFFF" LINK="#0033CC">

<!--TOOLBAR_START-->
<!--TOOLBAR_EXEMPT-->
<!--TOOLBAR_END-->
<FONT FACE=" 宋体"  class='9v'>
<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 WIDTH=100%><TR VALIGN=TOP><TD WIDTH=380>
<FONT class='9v' COLOR="#660033">Microsoft(R) JScript(R)</FONT><BR>
<FONT SIZE=5 COLOR="#660033"><B>parse 方法</B></FONT>

</TD>
<TD ALIGN=RIGHT>
<FONT class='9v' >&nbsp;<a href="jstoc.htm">语言参考</A>&nbsp;<BR><a href="jsversion.htm">版本&nbsp;1 </A>&nbsp;<P></FONT>


</TD></TR>
</TABLE>
<p><FONT class='9v' >
<a href="jsdateparseC.htm">请参阅</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="jsdateparseA.htm">应用于</a></font>
<hr noshade class='9v' ><FONT FACE=" 宋体"  class='9v'>

<H5>描述</H5>
<BLOCKQUOTE><p>解析一个包含日期的字符串，并返回该日期与 1970 年 1 月 1 日午夜之间所间隔的毫秒数。</BLOCKQUOTE>
<H5>语法</H5>
<BLOCKQUOTE>
<b>Date.parse(</b><i>dateVal</i><b>)</b>

<p>其中 <i>dateVal</i> 是一个包含以诸如 "Jan 5, 1996 08:47:00" 的格式表示的日期的字符串，或者是一个从 ActiveX(R) 对象或其他对象中获取的 VT_DATE 值。
</blockquote>

<H5>说明</H5>
<BLOCKQUOTE>
<b>parse</b> 方法返回一个整数值，这个整数表示 <i>dateVal</i> 中所包含的日期与 1970 年 1 月 1 日午夜之间相间隔的毫秒数。

<p><b>parse</b> 方法是 <b>Date</b> 对象的一个静态方法。正因为它是一个静态方法，它是通过下面例子中所示的方法被调用的，而不是作为一个已创建 <b>Date</b> 对象的一个方法被调用。
<blockquote><pre><font face=" 宋体" class='9v' >var datestring = "November 1, 1997 10:15 AM";
<FONT COLOR= "#FF0000">Date.parse(</FONT>datestring<FONT COLOR= "#FF0000">)</FONT></pre></font></blockquote>

下面这些规则决定了 <b>parse</b> 方法能够成功地解析那些字符串：
<ul>
<li>短日期可以使用“/”或“-”作为日期分隔符，但是必须用月/日/年的格式来表示，例如"7/20/96"。 
<li>以 "July 10 1995" 形式表示的长日期中的年、月、日可以按任何顺序排列，年份值可以用 2 位数字表示也可以用 4 位数字表示。如果使用 2 位数字来表示年份，那么该年份必须大于或等于 70。
<li>括号中的任何文本都被视为注释。这些括号可以嵌套使用。
<li>逗号和空格被视为分隔符。允许使用多个分隔符。
<li>月和日的名称必须具有两个或两个以上的字符。如果两个字符所组成的名称不是独一无二的，那么该名称就被解析成最后一个符合条件的月或日。例如，"Ju" 被解释为七月而不是六月。
<li>在所提供的日期中，如果所指定的星期几的值与按照该日期中剩余部分所确定的星期几的值不符合，那么该指定值就会被忽略。例如，尽管 1996 年 11 月 9 日实际上是星期五，"Tuesday November 9 1996" 也还是可以被接受并进行解析的。但是结果 <b>Date</b> 对象中包含的是 "Friday November 9 1996"。
<li>JScript 处理所有的标准时区，以及全球标准时间 (UTC) 和格林威治标准时间 (GMT)。
<li>小时、分钟、和秒钟之间用冒号分隔，尽管不是这三项都需要指明。"10:"、"10:11"、和 "10:11:12" 都是有效的。
<li>如果使用 24 小时计时的时钟，那么为中午 12 点之后的时间指定 "PM" 是错误的。例如 "23:15 PM" 就是错误的。
<li>包含无效日期的字符串是错误的。例如，一个包含有两个年份或两个月份的字符串就是错误的。
</ul>

下面这个例子说明了 <B>parse</B> 方法的用法：
<BLOCKQUOTE><PRE><FONT face=" 宋体" class='9v' >function GetTimeTest(testdate)
{
  var d, s, t;
  var MinMilli = 1000 * 60;
  var HrMilli = MinMilli * 60;
  var DyMilli = HrMilli * 24;
  d = new Date();
  t = <font color="#FF0000">Date.parse(</FONT>testdate<font color="#FF0000">)</FONT>;
  s = "There are "
  s += Math.round(Math.abs(t / DyMilli)) + " days "
  s += "between " + testdate + " and 1/1/70";
  return(s);
}</PRE></FONT></BLOCKQUOTE>
</BLOCKQUOTE>


<hr noshade class='9v' >
 
</font></FONT></BODY>

</HTML>


















